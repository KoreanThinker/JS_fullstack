### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar DateTime

type Image {
  createdAt: DateTime!
  id: Int!
  item: Item
  itemId: Int
  src: String!
}

input ImageWhereUniqueInput {
  id: Int
}

type Item {
  createdAt: DateTime!
  id: Int!
  images(after: ImageWhereUniqueInput, before: ImageWhereUniqueInput, first: Int, last: Int): [Image!]!
  name: String!
  order(after: OrderWhereUniqueInput, before: OrderWhereUniqueInput, first: Int, last: Int): [Order!]!
  partner: Partner
  partnerId: Int
  price: Int!
  published: Boolean!
  updatedAt: DateTime!
}

enum ItemState {
  canceled
  deliveryCompleted
  deliveryProgress
  receiptCompleted
  receiving
}

input ItemWhereUniqueInput {
  id: Int
  name: String
}

type Mutation {
  createItem(images: [String!]!, name: String!, price: Int!): Item
  createOrder(itemId: Int!, price: Int!): Order!
  deleteItem(id: Int!): Boolean
  partnerCancelOrder(orderId: Int!): Order!
  partnerLogin(email: String!, password: String!): Partner!
  partnerLogout: Boolean!
  partnerSignup(email: String!, name: String!, password: String!): Partner!
  updateItem(id: Int!, images: [String!], name: String, price: Int, published: Boolean): Item
  userCancelOrder(orderId: Int!): Order!
}

type Order {
  buyer: User
  buyerId: Int
  createdAt: DateTime!
  id: Int!
  item: Item
  itemId: Int
  itemState: ItemState!
  partner: Partner
  partnerId: Int
  price: Int!
  updatedAt: DateTime!
}

input OrderWhereUniqueInput {
  id: Int
}

type Partner {
  createdAt: DateTime!
  email: String!
  id: Int!
  items(after: ItemWhereUniqueInput, before: ItemWhereUniqueInput, first: Int, last: Int): [Item!]!
  name: String!
  orders(after: OrderWhereUniqueInput, before: OrderWhereUniqueInput, first: Int, last: Int): [Order!]!
  profit: Int!
}

type Query {
  image(id: Int!): Image
  iPartner: Partner
  isPartnerLoggedIn: Boolean!
  item(id: Int!): Item
  items: [Item!]
  iUser: User
  newOrder: [Order!]!
  order(id: Int!): Order
  partner(id: Int!): Partner
  user(id: Int!): User
}

enum SnsLogin {
  em
  fa
  go
  ka
  na
}

type User {
  createdAt: DateTime!
  email: String!
  id: Int!
  name: String!
  orders(after: OrderWhereUniqueInput, before: OrderWhereUniqueInput, first: Int, last: Int): [Order!]!
  sns: SnsLogin!
}
